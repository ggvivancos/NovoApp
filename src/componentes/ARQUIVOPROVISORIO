import React, { useState } from 'react';
import { Text, Dimensions, View, Button } from 'react-native';
import { PanGestureHandler, LongPressGestureHandler, State } from 'react-native-gesture-handler';
import Animated, { useAnimatedGestureHandler, useSharedValue, useAnimatedStyle, withSpring } from 'react-native-reanimated';
import { ScrollView } from 'react-native';
import DetalhesProcedimentoModal from './DetalhesProcedimentoModal';

const DESLOCAMENTO = 100;
const ALTURA_ANESTESISTA = 70;
const ALTURA_DO_RETANGULO = 50;
const spaceBetweenHours = 100;
const SCREEN_WIDTH = Dimensions.get('window').width;

const hospitalColors: { [key: string]: string } = {
    'Hospital A': '#FF8888',
    'Hospital B': '#88FF88',
    'Hospital C': '#8888FF',
    'Hospital D': '#FFFF88',
    'Hospital E': '#FF88FF',
};

interface RetanguloArrastavelProps {
    scrollViewRef: React.RefObject<ScrollView>;
    horaInicio: string;
    duracao: number;
    posicaoAnestesista: number;
    hospital: string;
    cirurgiao: string;
    color: string; 
}

function hourToXPosition(horaInicio: string): number {
    const [hours, minutes] = horaInicio.split(":").map(Number);
    return (hours + minutes / 60) * spaceBetweenHours + DESLOCAMENTO - (spaceBetweenHours * 7);
}

const RetanguloArrastavel: React.FC<RetanguloArrastavelProps> = ({
    scrollViewRef,
    horaInicio,
    duracao,
    posicaoAnestesista,
    hospital,
    cirurgiao,
    color,
}) => {
    const [modalVisible, setModalVisible] = useState(false);
    const handleCloseModal = () => {
        setModalVisible(false);
    };
    const handleLongPress = () => {
        setModalVisible(true);
    };
    
        const startX = hourToXPosition(horaInicio);
    const rectWidth = duracao * spaceBetweenHours;
    const startY = posicaoAnestesista * ALTURA_ANESTESISTA - (ALTURA_ANESTESISTA) / 2;

    const translateX = useSharedValue(startX);
    const translateY = useSharedValue(startY - (ALTURA_DO_RETANGULO / 2));

    const onGestureEvent = useAnimatedGestureHandler({
        onStart: (event, ctx) => {
            ctx.startX = translateX.value;
            ctx.startY = translateY.value;
        },
        onActive: (event, ctx) => {
            let newTranslateX = ctx.startX + event.translationX;
            let newTranslateY = ctx.startY + event.translationY;

            // Garantindo que o retângulo seja arrastado apenas dentro dos limites do gráfico
            newTranslateX = Math.min(Math.max(newTranslateX, 0), SCREEN_WIDTH - rectWidth);
            
            // Ajustando a posição Y para sempre se alinhar ao anestesista
            const snappedY = Math.round(newTranslateY / ALTURA_ANESTESISTA) * ALTURA_ANESTESISTA + 
                             (ALTURA_ANESTESISTA - ALTURA_DO_RETANGULO) / 2;
            
            translateX.value = newTranslateX;
            translateY.value = withSpring(snappedY);
        },
    });

    const animatedStyle = useAnimatedStyle(() => {
        return {
            transform: [
                { translateX: translateX.value },
                { translateY: translateY.value }
            ],
        };
    });

    const hospitalColor = hospitalColors[hospital] || '#000000'; 

    return (
        <>
            <LongPressGestureHandler
                onHandlerStateChange={({ nativeEvent }) => {
                    if (nativeEvent.state === State.ACTIVE) {
                        handleLongPress();
                    }
                }}
                minDurationMs={500}
            >
                <PanGestureHandler onGestureEvent={onGestureEvent} simultaneousHandlers={scrollViewRef}>
                    <Animated.View style={[
                        {
                            position: 'absolute',
                            left: startX,
                            width: rectWidth,
                            height: ALTURA_DO_RETANGULO,
                            backgroundColor: hospitalColor,
                            borderRadius: 10,
                        },
                        animatedStyle
                    ]}>
                        <Text style={{
                            fontSize: 16,
                            fontWeight: 'bold',
                            color: 'white',
                            paddingLeft: 10,
                            paddingTop: ALTURA_DO_RETANGULO * 0.05
                        }}>
                            {hospital}
                        </Text>
                        <Text style={{
                            fontSize: 15,
                            fontWeight: 'bold',
                            color: 'white',
                            paddingLeft: 10,
                            paddingTop: ALTURA_DO_RETANGULO * 0.05
                        }}>
                            {cirurgiao}
                        </Text>
                    </Animated.View>
                </PanGestureHandler>
            </LongPressGestureHandler>

            <DetalhesProcedimentoModal
                visible={modalVisible}
                onRequestClose={handleCloseModal}
                hospital={hospital}
                cirurgiao={cirurgiao}
            />
        </>
    );
}

export default RetanguloArrastavel;
